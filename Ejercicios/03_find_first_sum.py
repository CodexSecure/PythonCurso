"""
Dado un array de n√∫meros y un n√∫mero goal, encuentra los dos primeros n√∫meros del array que sumen el n√∫mero goal y devuelve sus √≠ndices.
Si no existe tal combinaci√≥n, devuelve None.

nums = [4, 5, 6, 2]
goal = 8

find_first_sum(nums, goal)  # [2, 3]
"""

import os

if os.name == "nt":      # nt = Windows
    os.system("cls")
else:                    # posix = Linux, macOS, Unix
    os.system("clear")

# ============================================
# ü¶ñ Buscar dos n√∫meros que sumen un objetivo
# ============================================

nums = [4, 5, 6, 2]   # Lista de n√∫meros
goal = 8              # Suma objetivo


# ------------------------------------------------------------
# üß© VERSI√ìN 1: B√ÅSICA (con dos bucles)
# Complejidad: O(n¬≤)
# ------------------------------------------------------------
def buscar_par_basico(nums, goal):
    """Busca el primer par de n√∫meros cuya suma sea igual a goal."""
    for i in range(len(nums)):              # Primer √≠ndice
        for j in range(i + 1, len(nums)):   # Segundo √≠ndice
            if nums[i] + nums[j] == goal:   # Comprobamos si suman el objetivo
                return [i, j]               # Devolvemos los √≠ndices del par
    return None # No se encontro ninguna combinacion

# ------------------------------------------------------------
# ‚ö° VERSI√ìN 2: OPTIMIZADA (con diccionario)
# Complejidad: O(n)
# ------------------------------------------------------------
def buscar_par_optimizado(nums, goal):
    """Busca el primer par usando un diccionario para m√°s eficiencia."""
    vistos = {}  # Guardar√° los n√∫meros vistos con su √≠ndice

    for i, num in enumerate(nums):          # Recorremos con √≠ndice y valor
        complemento = goal - num            # Calculamos el n√∫mero que falta

        if complemento in vistos:           # Si ya vimos ese complemento...
            return [vistos[complemento], i] # Devolvemos ambos √≠ndices

        vistos[num] = i                     # Guardamos el n√∫mero actual


# ------------------------------------------------------------
# üîé COMPROBACI√ìN DE RESULTADOS
# ------------------------------------------------------------

print("Versi√≥n b√°sica:", buscar_par_basico(nums, goal))        # ‚Üí [2, 3]
print("Versi√≥n optimizada:", buscar_par_optimizado(nums, goal))  # ‚Üí [2, 3]
