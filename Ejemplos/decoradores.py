import time   # Importamos la librer√≠a time para medir tiempos de ejecuci√≥n

# ================================
# 1) Decorador para medir tiempo
# ================================
def medir_tiempo(func):
    # Esta funci√≥n envuelve a otra y calcula cu√°nto tarda en ejecutarse
    def wrapper(*args, **kwargs):
        inicio = time.time()   # Guardamos el tiempo inicial
        resultado = func(*args, **kwargs)  # Ejecutamos la funci√≥n real
        fin = time.time()      # Guardamos el tiempo final
        print(f"‚è± Tiempo de ejecuci√≥n: {fin - inicio:.4f} segundos")
        return resultado       # Devolvemos el resultado original
    return wrapper


# ================================
# 2) Decorador para permisos
# ================================
def requiere_admin(func):
    # Este decorador comprueba si el usuario es "admin"
    def wrapper(usuario, *args, **kwargs):
        if usuario != "admin":   # Si no es admin ‚Üí no se ejecuta
            print("‚ùå Acceso denegado. Se requieren permisos de administrador.")
            return
        return func(usuario, *args, **kwargs)  # Si es admin ‚Üí ejecutamos la funci√≥n
    return wrapper


# ================================
# 3) Decorador para logging
# ================================
def log_funcion(func):
    # Este decorador imprime informaci√≥n antes y despu√©s de ejecutar la funci√≥n
    def wrapper(*args, **kwargs):
        print(f"üìã Ejecutando {func.__name__} con args={args}, kwargs={kwargs}")
        resultado = func(*args, **kwargs)  # Ejecutamos la funci√≥n
        print(f"‚úÖ {func.__name__} termin√≥ con resultado={resultado}")
        return resultado
    return wrapper


# ================================
# 4) Usando varios decoradores
# ================================
@medir_tiempo      # Mide el tiempo de ejecuci√≥n (√∫ltimo en aplicarse)
@log_funcion       # Registra los argumentos y el resultado
@requiere_admin    # Comprueba si el usuario tiene permisos (se ejecuta primero)
def multiplicar(usuario, a, b):
    """Funci√≥n que multiplica dos n√∫meros"""
    return a * b   # Devuelve el producto de a y b


# ================================
# PRUEBAS
# ================================
print("\n--- Caso 1: usuario sin permisos ---")
multiplicar("juan", 4, 5)  # Como "juan" no es admin, no podr√° ejecutar

print("\n--- Caso 2: usuario admin ---")
multiplicar("admin", 4, 5)  # Como es admin, s√≠ se ejecuta toda la cadena de decoradores
