"""
‚ö†Ô∏è Cu√°ndo usar y cu√°ndo no usar lambda

‚úÖ √ösalo cuando:

La funci√≥n sea muy corta (una sola l√≠nea).

La necesites solo una vez.

Quieras escribir c√≥digo m√°s compacto y legible.

‚ùå No lo uses cuando:

La funci√≥n tenga varias l√≠neas.

Sea compleja o se repita muchas veces ‚Üí mejor usar def.
"""

# ==========================================
# üîπ Ejemplos completos de funciones lambda
# ==========================================
# Autor: Fidel Oropesa (con explicaci√≥n did√°ctica)
# ------------------------------------------

# üß© 1Ô∏è‚É£ Funci√≥n normal vs funci√≥n lambda
# ------------------------------------------
# Ejemplo b√°sico: multiplicar dos n√∫meros

# ‚úÖ Funci√≥n normal
def multi(num1, num2):
    return num1 * num2

print(multi(3, 6))  # Salida: 18

# ‚úÖ Funci√≥n lambda equivalente
multiplicacion = lambda numero1, numero2: numero1 * numero2

# Podemos usarla directamente
resultado = multiplicacion(3, 6)
otro = multiplicacion(9, 2)

print(f"resultado es: {resultado} --- y otro es: {otro}")  # 18 y 18

# ‚úÖ Lambda ejecutada en una sola l√≠nea
# (Se define y ejecuta inmediatamente)
(lambda numero1, numero2: print(numero1 * numero2))(5, 9)  # Imprime 45

# ------------------------------------------
# üß† 2Ô∏è‚É£ Uso con una variable
# ------------------------------------------
# Calcular el cuadrado de un n√∫mero
cuadrado = lambda x: x ** 2
print(f"El cuadrado de 5 es: {cuadrado(5)}")  # 25

# ------------------------------------------
# ‚öôÔ∏è 3Ô∏è‚É£ Uso con varios par√°metros
# ------------------------------------------
suma = lambda a, b: a + b
print(f"Suma de 3 + 7 = {suma(3, 7)}")  # 10

# ------------------------------------------
# üó∫Ô∏è 4Ô∏è‚É£ Uso con map() ‚Üí aplica la funci√≥n a cada elemento de una lista
# map()	Aplica una funci√≥n a cada elemento de una lista
# lambda x: x**2	Funci√≥n an√≥nima que eleva cada n√∫mero al cuadrado
# list()	Convierte el resultado en una lista visible
# ------------------------------------------
nums = [1, 2, 3, 4]
cuadrados = list(map(lambda x: x ** 2, nums))
print(f"Cuadrados: {cuadrados}")  # [1, 4, 9, 16]
""" es el equivalente a este
nums = [1, 2, 3, 4]
cuadrados = []
for x in nums:
    cuadrados.append(x ** 2)
print(cuadrados)
"""

# ------------------------------------------
# üîç 5Ô∏è‚É£ Uso con filter() ‚Üí filtra seg√∫n una condici√≥n
# ------------------------------------------
nums = [1, 2, 3, 4, 5, 6]
pares = list(filter(lambda x: x % 2 == 0, nums))
print(f"N√∫meros pares: {pares}")  # [2, 4, 6]

# ------------------------------------------
# üî¢ 6Ô∏è‚É£ Uso con sorted() ‚Üí ordenar una lista de tuplas por el segundo valor
# ------------------------------------------
datos = [(1, 3), (2, 1), (5, 2)]
ordenado = sorted(datos, key=lambda x: x[1])
print(f"Ordenado por el segundo valor: {ordenado}")  # [(2, 1), (5, 2), (1, 3)]

# ------------------------------------------
# üßÆ 7Ô∏è‚É£ Ejemplo pr√°ctico: ordenar nombres por su longitud
# ------------------------------------------
nombres = ["Ana", "Cristina", "Luis", "Bea"]
ordenados = sorted(nombres, key=lambda x: len(x))
print(f"Nombres ordenados por longitud: {ordenados}")
# ['Ana', 'Bea', 'Luis', 'Cristina']

# ------------------------------------------
# ‚úÖ Cu√°ndo usar lambda
# ------------------------------------------
# ‚úî Cuando la funci√≥n sea peque√±a, de una l√≠nea.
# ‚úî Cuando no necesites reutilizarla muchas veces.
# ‚úî Cuando sea m√°s legible dentro de otra funci√≥n (map, filter, sorted).

# ‚ùå No usarla si:
# - La funci√≥n tiene varias l√≠neas.
# - Es compleja o se usar√° en muchas partes del c√≥digo.

# ------------------------------------------
# üí¨ Conclusi√≥n:
# ------------------------------------------
# Las funciones lambda son una herramienta √∫til
# para escribir c√≥digo m√°s compacto y expresivo.
# Son equivalentes a las funciones normales, pero an√≥nimas y ligeras.
# ------------------------------------------
