# ====================================================
# üåü ENCPSULACI√ìN AVANZADA EN PYTHON
# ====================================================

class BankAccount:
    """
    Clase que representa una cuenta bancaria.
    Demuestra encapsulaci√≥n con atributos privados, protegidos y propiedades.
    """

    def __init__(self, owner, balance):
        self._owner = owner          # Atributo protegido (convenci√≥n: solo para clase y subclases)
        self.__balance = balance     # Atributo privado

    # -------------------------------
    # Propiedad para acceder al owner
    # -------------------------------
    @property
    def owner(self):
        return self._owner

    @owner.setter
    def owner(self, new_owner):
        if isinstance(new_owner, str) and new_owner.strip():
            self._owner = new_owner
        else:
            print("Nombre inv√°lido para el propietario.")

    # -------------------------------
    # Propiedad para obtener balance
    # -------------------------------
    @property
    def balance(self):
        """Getter: devuelve el saldo actual"""
        return self.__balance

    # -------------------------------
    # M√©todos p√∫blicos
    # -------------------------------
    def deposit(self, amount):
        """Deposita dinero en la cuenta si el valor es positivo"""
        if amount > 0:
            self.__balance += amount
            self.__log_transaction(f"Dep√≥sito: {amount}‚Ç¨")
        else:
            print("Cantidad inv√°lida para depositar.")

    def withdraw(self, amount):
        """Retira dinero si hay suficiente saldo"""
        if amount <= 0:
            print("Cantidad inv√°lida para retirar.")
        elif amount > self.__balance:
            print(f"Fondos insuficientes. Saldo actual: {self.__balance}‚Ç¨")
        else:
            self.__balance -= amount
            self.__log_transaction(f"Retiro: {amount}‚Ç¨")

    # -------------------------------
    # M√©todo privado
    # -------------------------------
    def __log_transaction(self, message):
        """M√©todo privado para registrar transacciones (solo dentro de la clase)"""
        print(f"[{self._owner}] {message}. Saldo actual: {self.__balance}‚Ç¨")


# ====================================================
# USO DE LA CLASE
# ====================================================

# Crear cuenta
cuenta1 = BankAccount("Alice", 1000)

# Acceso a atributos protegidos y privados
print(cuenta1.owner)     # Acceso a propiedad protegida mediante getter
print(cuenta1.balance)   # Acceso al saldo mediante property

# Operaciones seguras
cuenta1.deposit(500)    # Dep√≥sito v√°lido
cuenta1.withdraw(200)   # Retiro v√°lido
cuenta1.withdraw(2000)  # Retiro inv√°lido, fondos insuficientes

# Cambiar nombre del propietario usando setter
cuenta1.owner = "Alice Cooper"
print(f"Nuevo propietario: {cuenta1.owner}")

# Intento de acceso directo a saldo privado (no recomendado)
# print(cuenta1.__balance)  # Esto dar√≠a error

# Saldo final
print(f"Saldo final: {cuenta1.balance}‚Ç¨")


"""
=============================================
RESUMEN AVANZADO DE ENCPSULACI√ìN
=============================================

1Ô∏è‚É£ Atributos privados y protegidos
- __balance ‚Üí privado, solo accesible dentro de la clase
- _owner ‚Üí protegido, convenci√≥n de acceso restringido a la clase y subclases

2Ô∏è‚É£ Propiedades (@property)
- Permiten acceder y modificar atributos de forma controlada
- Ejemplo: balance es solo lectura, owner tiene getter y setter con validaci√≥n

3Ô∏è‚É£ M√©todos privados
- __log_transaction ‚Üí solo puede llamarse dentro de la clase
- Permite encapsular la l√≥gica interna (registro de transacciones)

4Ô∏è‚É£ Beneficios
- Control total sobre c√≥mo se acceden o modifican los datos internos
- Posibilidad de validar entradas antes de cambiar atributos
- Mejora la seguridad y mantenibilidad del c√≥digo

5Ô∏è‚É£ Ejemplo pr√°ctico
- BankAccount protege el saldo (__balance) y el propietario (_owner)
- Todas las operaciones sobre saldo usan m√©todos seguros y registran transacciones
"""
